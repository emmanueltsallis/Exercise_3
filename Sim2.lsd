	
Label Root
{
	Son: SECTOR
	Label SECTOR
	{
		Son: FIRM
		Label FIRM
		{
			Var: p
			Var: dp
			Var: c
			Param: theta
			Param: mu
			Param: avg
			Param: sd
			Param: q
			Var: co
			Param: ms
			Param: epsilon_p
			Param: epsilon_q
			Param: q_min
			Param: q_max
			Param: mu_i

		}

		Var: mp
		Var: mp_2
		Var: ap_2
		Var: ap
		Var: exit
		Param: switch_entry
		Var: entry
		Param: mu_j

	}


}


DATA

Object: Root C	1

Object: SECTOR C	1
Var: mp 0 s + n n
Var: mp_2 0 s + n n
Var: ap_2 0 s + n n
Var: ap 0 s + n n
Var: exit 0 n + n n
Param: switch_entry 0 n + n n	2
Var: entry 0 n + n n
Param: mu_j 0 n + n n	0.1

Object: FIRM C	5
Var: p 1 s + n n	7.86024720778085	8.20824342841914	8.46228188185092	7.61568275215472	7.61568275215472
Var: dp 0 n + n n
Var: c 0 n + n n
Param: theta 0 n + n n	0.5	0.5	0.5	0.5	0.5
Param: mu 0 n + n n	0.5	0.5	0.5	0.5	0.5
Param: avg 0 n + n n	5	5	5	5	5
Param: sd 0 n + n n	1	1	1	1	1
Param: q 1 n + n n	1	1	1	1	1
Var: co 0 n + n n
Param: ms 0 n + n n	0.2	0.2	0.2	0.2	0.2
Param: epsilon_p 0 n + n n	1	1	1	1	1
Param: epsilon_q 0 n + n n	1	1	1	1	1
Param: q_min 0 n + n n	0	0	0	0	0
Param: q_max 0 n + n n	1	1	1	1	1
Param: mu_i 0 n + n n	0.5	0.5	0.5	0.5	0.5

SIM_NUM 1
SEED 5
MAX_STEP 100
EQUATION fun_Exercise_2.cpp
MODELREPORT report_Sim1.html

DESCRIPTION

Object_Root

END_DESCRIPTION

Object_SECTOR

END_DESCRIPTION

Variable_mp
Compute the maximum price among firms in each period
END_DESCRIPTION

Variable_mp_2

END_DESCRIPTION

Variable_ap_2

END_DESCRIPTION

Variable_ap

END_DESCRIPTION

Variable_exit

END_DESCRIPTION

Parameter_switch_entry

_INIT_
All 1 instances equal to 2
END_DESCRIPTION

Variable_entry

END_DESCRIPTION

Parameter_mu_j

_INIT_
All 1 instances equal to 0.1
END_DESCRIPTION

Object_FIRM

END_DESCRIPTION

Variable_p
p_(i,t) = theta_i*dp_(i,t) + (1 - theta_i)*ap_(t-1)
 where:
 p_(i,t) is the price of firm i in period t;
 theta_i is the degree of monopoly of firm i(parameter);
 dp_(i,t) is the desired price of firm i in period t;
 ap_(t-1) is the average price in period t-1;
_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Variable_dp
dp_(i,t) = (1 + µ_i)*c_(i,t)
 where:
 µ_i is the markup of firm i (parameter);
 c_(i,t) is the cost of firm i in period t;
END_DESCRIPTION

Variable_c
c_(i,t) ~ N(avg, sd)
END_DESCRIPTION

Parameter_theta

_INIT_
All 5 instances equal to 0.5
END_DESCRIPTION

Parameter_mu

_INIT_
All 5 instances equal to 0.5
END_DESCRIPTION

Parameter_avg

_INIT_
All 5 instances equal to 5
END_DESCRIPTION

Parameter_sd

_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Parameter_q
q_(i,t) = q_(i,t-1) + c_t
_INIT_
Instances from 1 to 2 equal to 1
Instances from 1 to 2 equal to 1
Instances from 1 to 1000 equal to 1
END_DESCRIPTION

Variable_co
co_(i,t) = (q_(i,t)^epsilon_q) / (p_(i,t)^epsilon_p)
END_DESCRIPTION

Parameter_ms
ms_(i,t) = ms_(i,t-1) * [1 + mu_j * (co_(i,t) / avgco_(j,t) - 1)]
_INIT_
All 5 instances equal to 0.2
END_DESCRIPTION

Parameter_epsilon_p

_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Parameter_epsilon_q

_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Parameter_q_min

_INIT_
All 5 instances equal to 0
END_DESCRIPTION

Parameter_q_max

_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Parameter_mu_i

_INIT_
All 5 instances equal to 0.5
END_DESCRIPTION


DOCUOBSERVE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE
//#define EIGENLIB			// uncomment to use Eigen linear algebra library

#include "fun_head_fast.h"

// do not add Equations in this area

MODELBEGIN

// insert your equations here, ONLY between the MODELBEGIN and MODELEND words

/////////////////////////
///// AVERAGE PRICE /////
/////////////////////////

EQUATION("ap")

	v[0] = 0;
	v[2] = 0;

	CYCLE(cur, "FIRM")
		{
		v[1] = VS(cur, "p");
		v[0] = v[0] + v[1]; //sum of prices
		v[2] = v[2] + 1;	//count firms
		}

RESULT(v[0]/v[2])

/*
or
*/

EQUATION("ap_2")
RESULT(AVE("p"))

/////////////////////////
////////// PRICE ////////
/////////////////////////

EQUATION("p")
// p_(i,t) = theta_i*dp_(i,t) + (1 - theta_i)*ap_(t-1)
/*
 where:
 p_(i,t) is the price of firm i in period t;
 theta_i is the degree of monopoly of firm i(parameter);
 dp_(i,t) is the desired price of firm i in period t;
 ap_(t-1) is the average price in period t-1; 
*/

	v[0] = V("theta"); // theta is the degree of monopoly of firm i (parameter);
	v[1] = V("dp"); // dp is the desired price;
	v[2] = AVEL("p", 1);

RESULT(v[0]*v[1] + (1-v[0])*v[2])


/////////////////////////
///// DESIRED PRICE /////
/////////////////////////

EQUATION("dp")
// dp_(i,t) = (1 + µ_i)*c_(i,t)
/*
 where:
 µ_i is the markup of firm i (parameter);
 c_(i,t) is the cost of firm i in period t;
*/
	
	v[0] = V("mu_i"); // mu is the markup of firm i (parameter);
	v[1] = V("c");

RESULT((1 + v[0])*v[1])


/////////////////////////
////////// COST /////////
/////////////////////////

EQUATION("c")
//	 c_(i,t) ~ N(avg, sd)

	v[0] = V("avg");
	v[1] = V("sd");

RESULT(norm(v[0], v[1]))


/////////////////////////
///// MAXIMUM PRICE /////
/////////////////////////

EQUATION("mp"); //mp is maximum price;

/*
Compute the maximum price among firms in each period
*/

	v[0] = 0; // Initialize v[0] to store the maximum price

	CYCLE(cur, "FIRM")
		{
		v[1] = VS(cur, "p"); // Find the maximum price among firms in the current sector
	
    	// Check if v[1] is greater than the current maximum stored in v[0]
    	if (v[1] > v[0])
    		{
			v[0] = v[1]; // Update v[0] with the new maximum price
    		}
		}

RESULT(v[0]) // Return the maximum price for the current period

/*
or
*/

EQUATION("mp_2");
RESULT(MAX("p"))


/////////////////////////
////////// EXIT /////////
/////////////////////////

EQUATION("exit")

	v[1] = COUNT("FIRM");
	
	if(v[1] > 1)
		{
		v[0] = V("mp");
		cur = SEARCH_CND("p", v[0]);
		DELETE(cur);
		}
		
RESULT(0)


/////////////////////////
///////// ENTRY /////////
/////////////////////////

EQUATION("entry")

	v[1] = V("switch_entry"); // 0 = no entry; 1 = minimum price; 2 = random price.
	if(v[1] == 1)
		{
		v[0] = MIN("p");
		cur = SEARCH_CND("p", v[0]);
		cur2 = ADDOBJ_EX("FIRM", cur);
		WRITES(cur2, "theta", 0.1);
		}
	if(v[1] == 2)
		{
		cur = RNDDRAW_FAIR("FIRM");
		ADDOBJ_EX("FIRM", cur);
		}
		
RESULT(0)


/////////////////////////
////// MARKET SHARE /////
/////////////////////////

EQUATION("ms")

// ms_(i,t) = ms_(i,t-1) * [1 + mu_j * (co_(i,t) / avgco_(j,t) - 1)]

	v[0] = VL("ms", 1); // ms_(i,t-1)
	v[1] = V("mu_j"); // mu_j (market share adjustment parameter)
	v[2] = V("co"); // co_(i,t)
	v[3] = AVE("co"); // avgco_(j,t)

RESULT(v[0] * (1 + v[1] * (v[2] / v[3] - 1)))


/////////////////////////
//// COMPETITIVENESS ////
/////////////////////////

EQUATION("co")

// co_(i,t) = (q_(i,t)^epsilon_q) / (p_(i,t)^epsilon_p)

	v[0] = V("q"); // q_(i,t)
	v[1] = V("p"); // p_(i,t)
	v[2] = V("epsilon_q"); // epsilon_q
	v[3] = V("epsilon_p"); // epsilon_p

RESULT(pow(v[0], v[2]) / pow(v[1], v[3]))

/////////////////////////
//////// QUALITY ////////
/////////////////////////

EQUATION("q")

// q_(i,t) = q_(i,t-1) + c_t

	v[0] = VL("q", 1); // q_(i,t-1)
	v[1] = V("q_min");
	v[2] = V("q_max");
	v[3] = uniform(v[1], v[2]); // Generate a random component following a uniform distribution

RESULT(v[0] + v[3])

	
MODELEND

// do not add Equations in this area

void close_sim( void )
{
	// close simulation special commands go here
}

END_EQ_FILE
